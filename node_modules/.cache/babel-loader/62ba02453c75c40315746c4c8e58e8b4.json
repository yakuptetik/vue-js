{"ast":null,"code":"import { upload } from './file-upload.service';\nconst STATUS_INITIAL = 0,\n      STATUS_SAVING = 1,\n      STATUS_SUCCESS = 2,\n      STATUS_FAILED = 3;\nexport default {\n  name: 'app',\n\n  data() {\n    return {\n      uploadedFiles: [],\n      uploadError: null,\n      currentStatus: null,\n      uploadFieldName: 'photos'\n    };\n  },\n\n  computed: {\n    isInitial() {\n      return this.currentStatus === STATUS_INITIAL;\n    },\n\n    isSaving() {\n      return this.currentStatus === STATUS_SAVING;\n    },\n\n    isSuccess() {\n      return this.currentStatus === STATUS_SUCCESS;\n    },\n\n    isFailed() {\n      return this.currentStatus === STATUS_FAILED;\n    }\n\n  },\n  methods: {\n    reset() {\n      // reset form to initial state\n      this.currentStatus = STATUS_INITIAL;\n      this.uploadedFiles = [];\n      this.uploadError = null;\n    },\n\n    save(formData) {\n      // upload data to the server\n      this.currentStatus = STATUS_SAVING;\n      upload(formData).then(x => {\n        this.uploadedFiles = [].concat(x);\n        this.currentStatus = STATUS_SUCCESS;\n      }).catch(err => {\n        this.uploadError = err.response;\n        this.currentStatus = STATUS_FAILED;\n      });\n    },\n\n    filesChange(fieldName, fileList) {\n      // handle file changes\n      const formData = new FormData();\n      if (!fileList.length) return; // append the files to FormData\n\n      Array.from(Array(fileList.length).keys()).map(x => {\n        formData.append(fieldName, fileList[x], fileList[x].name);\n      }); // save it\n\n      this.save(formData);\n    }\n\n  },\n\n  mounted() {\n    this.reset();\n  }\n\n};","map":{"version":3,"mappings":"AACA,SAASA,MAAT,QAAuB,uBAAvB;AAEE,MAAMC,cAAa,GAAI,CAAvB;AAAA,MAA0BC,aAAY,GAAI,CAA1C;AAAA,MAA6CC,cAAa,GAAI,CAA9D;AAAA,MAAiEC,aAAY,GAAI,CAAjF;AAEA,eAAe;EACbC,IAAI,EAAE,KADO;;EAEbC,IAAI,GAAG;IACL,OAAO;MACLC,aAAa,EAAE,EADV;MAELC,WAAW,EAAE,IAFR;MAGLC,aAAa,EAAE,IAHV;MAILC,eAAe,EAAE;IAJZ,CAAP;EAMD,CATY;;EAUbC,QAAQ,EAAE;IACRC,SAAS,GAAG;MACV,OAAO,KAAKH,aAAL,KAAuBR,cAA9B;IACD,CAHO;;IAIRY,QAAQ,GAAG;MACT,OAAO,KAAKJ,aAAL,KAAuBP,aAA9B;IACD,CANO;;IAORY,SAAS,GAAG;MACV,OAAO,KAAKL,aAAL,KAAuBN,cAA9B;IACD,CATO;;IAURY,QAAQ,GAAG;MACT,OAAO,KAAKN,aAAL,KAAuBL,aAA9B;IACF;;EAZQ,CAVG;EAwBbY,OAAO,EAAE;IACPC,KAAK,GAAG;MACN;MACA,KAAKR,aAAL,GAAqBR,cAArB;MACA,KAAKM,aAAL,GAAqB,EAArB;MACA,KAAKC,WAAL,GAAmB,IAAnB;IACD,CANM;;IAOPU,IAAI,CAACC,QAAD,EAAW;MACb;MACA,KAAKV,aAAL,GAAqBP,aAArB;MAEAF,MAAM,CAACmB,QAAD,CAAN,CACGC,IADH,CACQC,KAAK;QACT,KAAKd,aAAL,GAAqB,GAAGe,MAAH,CAAUD,CAAV,CAArB;QACA,KAAKZ,aAAL,GAAqBN,cAArB;MACD,CAJH,EAKGoB,KALH,CAKSC,GAAE,IAAK;QACZ,KAAKhB,WAAL,GAAmBgB,GAAG,CAACC,QAAvB;QACA,KAAKhB,aAAL,GAAqBL,aAArB;MACD,CARH;IASD,CApBM;;IAqBPsB,WAAW,CAACC,SAAD,EAAYC,QAAZ,EAAsB;MAC/B;MACA,MAAMT,QAAO,GAAI,IAAIU,QAAJ,EAAjB;MAEA,IAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB,OAJS,CAM/B;;MACAC,KAAI,CACDC,IADH,CACQD,KAAK,CAACH,QAAQ,CAACE,MAAV,CAAL,CAAuBG,IAAvB,EADR,EAEGC,GAFH,CAEOb,KAAK;QACRF,QAAQ,CAACgB,MAAT,CAAgBR,SAAhB,EAA2BC,QAAQ,CAACP,CAAD,CAAnC,EAAwCO,QAAQ,CAACP,CAAD,CAAR,CAAYhB,IAApD;MACD,CAJH,EAP+B,CAa/B;;MACA,KAAKa,IAAL,CAAUC,QAAV;IACF;;EApCO,CAxBI;;EA8DbiB,OAAO,GAAG;IACR,KAAKnB,KAAL;EACD;;AAhEY,CAAf","names":["upload","STATUS_INITIAL","STATUS_SAVING","STATUS_SUCCESS","STATUS_FAILED","name","data","uploadedFiles","uploadError","currentStatus","uploadFieldName","computed","isInitial","isSaving","isSuccess","isFailed","methods","reset","save","formData","then","x","concat","catch","err","response","filesChange","fieldName","fileList","FormData","length","Array","from","keys","map","append","mounted"],"sourceRoot":"","sources":["/Users/yakup/Desktop/vue-proje/src/views/imageView.vue"],"sourcesContent":["<script>\nimport { upload } from './file-upload.service';\n\n  const STATUS_INITIAL = 0, STATUS_SAVING = 1, STATUS_SUCCESS = 2, STATUS_FAILED = 3;\n\n  export default {\n    name: 'app',\n    data() {\n      return {\n        uploadedFiles: [],\n        uploadError: null,\n        currentStatus: null,\n        uploadFieldName: 'photos'\n      }\n    },\n    computed: {\n      isInitial() {\n        return this.currentStatus === STATUS_INITIAL;\n      },\n      isSaving() {\n        return this.currentStatus === STATUS_SAVING;\n      },\n      isSuccess() {\n        return this.currentStatus === STATUS_SUCCESS;\n      },\n      isFailed() {\n        return this.currentStatus === STATUS_FAILED;\n      }\n    },\n    methods: {\n      reset() {\n        // reset form to initial state\n        this.currentStatus = STATUS_INITIAL;\n        this.uploadedFiles = [];\n        this.uploadError = null;\n      },\n      save(formData) {\n        // upload data to the server\n        this.currentStatus = STATUS_SAVING;\n\n        upload(formData)\n          .then(x => {\n            this.uploadedFiles = [].concat(x);\n            this.currentStatus = STATUS_SUCCESS;\n          })\n          .catch(err => {\n            this.uploadError = err.response;\n            this.currentStatus = STATUS_FAILED;\n          });\n      },\n      filesChange(fieldName, fileList) {\n        // handle file changes\n        const formData = new FormData();\n\n        if (!fileList.length) return;\n\n        // append the files to FormData\n        Array\n          .from(Array(fileList.length).keys())\n          .map(x => {\n            formData.append(fieldName, fileList[x], fileList[x].name);\n          });\n\n        // save it\n        this.save(formData);\n      }\n    },\n    mounted() {\n      this.reset();\n    },\n  }\n</script>\n\n<!-- HTML Template -->\n<template>\n  <div id=\"app\">\n    <div class=\"container\">\n      <!--UPLOAD-->\n      <form enctype=\"multipart/form-data\" novalidate v-if=\"isInitial || isSaving\">\n        <h1>Upload images</h1>\n        <div class=\"dropbox\">\n          <input type=\"file\" multiple :name=\"uploadFieldName\" :disabled=\"isSaving\" @change=\"filesChange($event.target.name, $event.target.files); fileCount = $event.target.files.length\"\n            accept=\"image/*\" class=\"input-file\">\n            <p v-if=\"isInitial\">\n              Drag your file(s) here to begin<br> or click to browse\n            </p>\n            <p v-if=\"isSaving\">\n              Uploading {{ fileCount }} files...\n            </p>\n        </div>\n      </form>\n  </div>\n   </div>\n</template>\n\n<!-- Javascript -->\n<script>\n</script>\n\n<!-- SASS styling -->\n<style lang=\"scss\">\n\n\n\n\n\n  .dropbox {\n    outline: 2px dashed grey; /* the dash box */\n    outline-offset: -10px;\n    background: lightcyan;\n    color: dimgray;\n    padding: 10px 10px;\n    min-height: 200px; /* minimum height */\n    position: relative;\n    cursor: pointer;\n  }\n  \n  .input-file {\n    opacity: 0; /* invisible but it's there! */\n    width: 100%;\n    height: 200px;\n    position: absolute;\n    cursor: pointer;\n  }\n  \n  .dropbox:hover {\n    background: lightblue; /* when mouse over to the drop zone, change color */\n  }\n  \n  .dropbox p {\n    font-size: 1.2em;\n    text-align: center;\n    padding: 50px 0;\n  }\n</style>\n"]},"metadata":{},"sourceType":"module"}